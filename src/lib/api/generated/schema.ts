/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/accounts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List accounts
         * @description Lists all accounts with pagination
         */
        get: {
            parameters: {
                query?: {
                    /** @description Limit */
                    limit?: number;
                    /** @description Offset */
                    offset?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Account"][];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        put?: never;
        /**
         * Create account
         * @description Creates a new account
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Create account request */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["request.CreateAccount"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Account"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/accounts/{accountId}/blocks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List account blocks
         * @description Lists all blocks for an account
         */
        get: {
            parameters: {
                query?: {
                    /** @description Limit */
                    limit?: number;
                    /** @description Offset */
                    offset?: number;
                };
                header?: never;
                path: {
                    /** @description Account ID */
                    accountId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Block"][];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/accounts/{accountId}/favorites": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List account favorites
         * @description Lists all favorites for an account
         */
        get: {
            parameters: {
                query?: {
                    /** @description Filter by entity type */
                    entity_type?: string;
                    /** @description Limit */
                    limit?: number;
                    /** @description Offset */
                    offset?: number;
                };
                header?: never;
                path: {
                    /** @description Account ID */
                    accountId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Favorite"][];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/accounts/{accountId}/invoices": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List invoices by account
         * @description Lists all invoices for an account with pagination
         */
        get: {
            parameters: {
                query?: {
                    /** @description Limit (default 50) */
                    limit?: number;
                    /** @description Offset (default 0) */
                    offset?: number;
                };
                header?: never;
                path: {
                    /** @description Account ID */
                    accountId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.InvoiceList"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/accounts/{accountId}/payment-methods": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List account payment methods
         * @description Lists all payment methods for an account
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Account ID */
                    accountId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.PaymentMethod"][];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        put?: never;
        /**
         * Attach payment method
         * @description Attaches a Stripe payment method to an account
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Account ID */
                    accountId: string;
                };
                cookie?: never;
            };
            /** @description Attach payment method request */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["request.AttachPaymentMethod"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.PaymentMethod"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/accounts/{accountId}/payment-methods/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Detach payment method
         * @description Removes a payment method from an account
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Account ID */
                    accountId: string;
                    /** @description Payment Method ID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Success"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/accounts/{accountId}/payment-methods/{id}/set-default": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Set default payment method
         * @description Sets a payment method as the default for an account
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Account ID */
                    accountId: string;
                    /** @description Payment Method ID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Success"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/accounts/{accountId}/payment-methods/default": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get default payment method
         * @description Retrieves the default payment method for an account
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Account ID */
                    accountId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.PaymentMethod"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/accounts/{accountId}/ratings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create or update rating
         * @description Creates a new rating or updates existing rating for a caterer
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Account ID */
                    accountId: string;
                };
                cookie?: never;
            };
            /** @description Create rating request */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["request.CreateRating"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.CatererRating"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/accounts/{accountId}/ratings/my/{catererId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get my rating
         * @description Retrieves the rating an account gave to a specific caterer
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Account ID */
                    accountId: string;
                    /** @description Caterer ID */
                    catererId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.CatererRating"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/accounts/{accountId}/staff": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List staff members */
        get: {
            parameters: {
                query?: {
                    /** @description Limit */
                    limit?: number;
                    /** @description Offset */
                    offset?: number;
                };
                header?: never;
                path: {
                    /** @description Account ID */
                    accountId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.StaffMember"][];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        put?: never;
        /** Invite staff member */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Account ID */
                    accountId: string;
                };
                cookie?: never;
            };
            /** @description Invitation details */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["request.InviteStaff"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.InvitationCreated"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/accounts/{accountId}/staff/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get staff member */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Account ID */
                    accountId: string;
                    /** @description User ID */
                    userId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.StaffMember"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /** Remove staff member */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Account ID */
                    accountId: string;
                    /** @description User ID */
                    userId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/accounts/{accountId}/staff/{userId}/position": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update staff position */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Account ID */
                    accountId: string;
                    /** @description User ID */
                    userId: string;
                };
                cookie?: never;
            };
            /** @description Position update */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["request.UpdateStaffPosition"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            [key: string]: string;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/accounts/{accountId}/staff/{userId}/role": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update staff role */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Account ID */
                    accountId: string;
                    /** @description User ID */
                    userId: string;
                };
                cookie?: never;
            };
            /** @description Role update */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["request.UpdateStaffRole"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            [key: string]: string;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/accounts/{accountId}/support/tickets": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List account tickets
         * @description Lists all tickets for an account
         */
        get: {
            parameters: {
                query?: {
                    /** @description Limit */
                    limit?: number;
                    /** @description Offset */
                    offset?: number;
                };
                header?: never;
                path: {
                    /** @description Account ID */
                    accountId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.SupportTicket"][];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/accounts/{accountId}/wallets": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List account wallets
         * @description Lists all wallets for an account
         */
        get: {
            parameters: {
                query?: {
                    /** @description Limit */
                    limit?: number;
                    /** @description Offset */
                    offset?: number;
                };
                header?: never;
                path: {
                    /** @description Account ID */
                    accountId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Wallet"][];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/accounts/{accountId}/wallets/active": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get or create wallet
         * @description Gets or creates an active wallet for an account and currency
         */
        get: {
            parameters: {
                query: {
                    /** @description Currency code (e.g. USD) */
                    currency: string;
                };
                header?: never;
                path: {
                    /** @description Account ID */
                    accountId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Wallet"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/accounts/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get account
         * @description Retrieves an account by ID
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Account ID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Account"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        /**
         * Update account
         * @description Updates an existing account
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Account ID */
                    id: string;
                };
                cookie?: never;
            };
            /** @description Update account request */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["request.UpdateAccount"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Account"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        post?: never;
        /**
         * Close account
         * @description Closes an account permanently
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Account ID */
                    id: string;
                };
                cookie?: never;
            };
            /** @description Close account request */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["request.CloseAccount"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Account"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/accounts/{id}/reactivate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Reactivate account
         * @description Reactivates a suspended account
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Account ID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Account"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/accounts/{id}/settings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get account settings
         * @description Retrieves account settings
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Account ID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["entity.AccountSettings"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        /**
         * Update account settings
         * @description Updates account settings
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Account ID */
                    id: string;
                };
                cookie?: never;
            };
            /** @description Account settings */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["entity.AccountSettings"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Account"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/accounts/{id}/suspend": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Suspend account
         * @description Suspends an account
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Account ID */
                    id: string;
                };
                cookie?: never;
            };
            /** @description Suspend account request */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["request.SuspendAccount"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Account"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/accounts/{id}/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get account users
         * @description Retrieves all users associated with an account
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Account ID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.User"][];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        put?: never;
        /**
         * Assign users to account
         * @description Assigns multiple users to an account
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Account ID */
                    id: string;
                };
                cookie?: never;
            };
            /** @description Assign users request */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["request.AssignUsers"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Success"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/2fa/backup-codes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Regenerate backup codes
         * @description Generates new backup codes for 2FA recovery
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.BackupCodes"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/2fa/disable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Disable TOTP 2FA
         * @description Disables 2FA for the authenticated user
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.TOTPDisabled"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/2fa/enable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Verify and enable TOTP 2FA
         * @description Verifies a TOTP code and enables 2FA, returns backup codes
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description TOTP code */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["request.VerifyTOTP"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.TOTPEnabled"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/2fa/recovery/sms": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Request SMS recovery
         * @description Sends an SMS code to recover 2FA access
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Email */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["request.RequestSMSRecovery"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            [key: string]: string;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/2fa/recovery/verify": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Verify SMS and disable 2FA
         * @description Verifies SMS code and disables 2FA for account recovery
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Email and code */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["request.VerifySMSRecovery"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.TOTPDisabled"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/2fa/setup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Setup TOTP 2FA
         * @description Generates a TOTP secret and QR code for authenticator app setup
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.TOTPSetup"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/google/callback": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Handle Google OAuth callback
         * @description Completes Google OAuth flow and returns JWT
         */
        get: {
            parameters: {
                query: {
                    /** @description Authorization code from Google */
                    code: string;
                    /** @description State for CSRF validation */
                    state?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            [key: string]: unknown;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/google/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Initiate Google OAuth flow
         * @description Generates Google OAuth authorization URL
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            [key: string]: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Login with email */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Login */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["request.Login"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.AccessToken"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Logout (revoke token) */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/ott": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Issue one-time token */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Issue OTT */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["request.IssueOTT"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["entity.OneTimeToken"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/ott/exchange": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Exchange one-time token for access token */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Exchange */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["request.ExchangeOTT"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.AccessToken"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/password/forgot": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Request password reset */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Forgot Password */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["request.ForgotPassword"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            [key: string]: string;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/password/reset": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Reset password with token */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Reset Password */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["request.ResetPassword"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.AccessToken"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/phone/send-code": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Send phone verification code
         * @description Sends a 6-digit verification code via SMS to the provided phone number
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Phone number */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["request.SendVerificationCode"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.VerificationSent"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/phone/verify-code": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Verify phone code
         * @description Verifies a 6-digit code sent to the phone number
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Phone number and code */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["request.VerifyCode"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.VerificationResult"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/blocks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Block entity
         * @description Blocks an entity
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Block entity request */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["request.BlockEntity"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Block"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/blocks/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Unblock entity
         * @description Removes a block by ID
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Block ID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/blocks/by-entity": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Unblock by entity
         * @description Removes a block by owner and entity details
         */
        delete: {
            parameters: {
                query: {
                    /** @description Owner ID */
                    owner_id: string;
                    /** @description Owner type (user, account) */
                    owner_type: string;
                    /** @description Entity ID */
                    entity_id: string;
                    /** @description Entity type */
                    entity_type: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/blocks/check": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Check if blocked
         * @description Checks if an entity is blocked
         */
        get: {
            parameters: {
                query: {
                    /** @description Owner ID */
                    owner_id: string;
                    /** @description Owner type (user, account) */
                    owner_type: string;
                    /** @description Entity ID */
                    entity_id: string;
                    /** @description Entity type */
                    entity_type: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            [key: string]: boolean;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/carts/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get cart
         * @description Retrieves a cart by ID
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cart ID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Cart"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/carts/{id}/checkout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Convert cart to order
         * @description Converts a cart to an order (checkout)
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cart ID */
                    id: string;
                };
                cookie?: never;
            };
            /** @description Convert cart request */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["request.ConvertCartToOrder"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Order"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/carts/{id}/items": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get cart with items
         * @description Retrieves a cart with all its items
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cart ID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.CartWithItems"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        put?: never;
        /**
         * Add item to cart
         * @description Adds a menu item to the cart
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cart ID */
                    id: string;
                };
                cookie?: never;
            };
            /** @description Add item request */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["request.AddItemToCart"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.CartItem"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        /**
         * Clear cart
         * @description Removes all items from the cart
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cart ID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/carts/{id}/items/{itemId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Remove item from cart
         * @description Removes an item from the cart
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cart ID */
                    id: string;
                    /** @description Cart Item ID */
                    itemId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/carts/{id}/items/{itemId}/quantity": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update cart item quantity
         * @description Updates the quantity of a cart item
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Cart ID */
                    id: string;
                    /** @description Cart Item ID */
                    itemId: string;
                };
                cookie?: never;
            };
            /** @description Update quantity request */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["request.UpdateCartItemQuantity"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.CartItem"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/caterers/{catererId}/deliveries": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List caterer deliveries
         * @description Lists all deliveries for a caterer
         */
        get: {
            parameters: {
                query?: {
                    /** @description Limit */
                    limit?: number;
                    /** @description Offset */
                    offset?: number;
                };
                header?: never;
                path: {
                    /** @description Caterer ID */
                    catererId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.DeliveryTask"][];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/caterers/{catererId}/feedback": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List caterer feedback
         * @description Lists all feedback for a caterer
         */
        get: {
            parameters: {
                query?: {
                    /** @description Limit */
                    limit?: number;
                    /** @description Offset */
                    offset?: number;
                };
                header?: never;
                path: {
                    /** @description Caterer ID */
                    catererId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Feedback"][];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/caterers/{catererId}/menu-items": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List caterer menu items
         * @description Retrieves all menu items for a caterer
         */
        get: {
            parameters: {
                query?: {
                    /** @description Limit (max 100) */
                    limit?: number;
                    /** @description Offset */
                    offset?: number;
                };
                header?: never;
                path: {
                    /** @description Caterer ID */
                    catererId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.MenuItem"][];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/caterers/{catererId}/menus": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List caterer menus
         * @description Retrieves all menus for a caterer
         */
        get: {
            parameters: {
                query?: {
                    /** @description Limit (max 100) */
                    limit?: number;
                    /** @description Offset */
                    offset?: number;
                };
                header?: never;
                path: {
                    /** @description Caterer ID */
                    catererId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Menu"][];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/caterers/{catererId}/rating": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get caterer rating
         * @description Retrieves average rating for a caterer
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Caterer ID */
                    catererId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.CatererRatingSummary"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/caterers/{catererId}/ratings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List caterer ratings
         * @description Lists all ratings for a caterer with pagination
         */
        get: {
            parameters: {
                query?: {
                    /** @description Limit */
                    limit?: number;
                    /** @description Offset */
                    offset?: number;
                };
                header?: never;
                path: {
                    /** @description Caterer ID */
                    catererId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.CatererRating"][];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/caterers/{catererId}/ratings/stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get caterer statistics
         * @description Retrieves average rating and total count for a caterer
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Caterer ID */
                    catererId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.CatererStats"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/change-requests": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Change Request
         * @description Create a new change request for offers, orders, or events
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Change request details */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["request.CreateChangeRequest"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.ChangeRequest"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/change-requests/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Change Request
         * @description Retrieve a change request by ID
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Change Request ID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.ChangeRequest"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/change-requests/{id}/comments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Comments
         * @description List all comments for a change request
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Change Request ID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.ChangeRequestComment"][];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        put?: never;
        /**
         * Add Comment
         * @description Add a comment to a change request
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Change Request ID */
                    id: string;
                };
                cookie?: never;
            };
            /** @description Comment details */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["request.AddComment"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Success"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/change-requests/{id}/escalate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Escalate Change Request
         * @description Escalate a change request to another user
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Change Request ID */
                    id: string;
                };
                cookie?: never;
            };
            /** @description Escalation details */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["request.EscalateChangeRequest"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Success"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/change-requests/{id}/history": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Change Request History
         * @description Get the complete history of a change request
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Change Request ID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.ChangeRequestHistory"][];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/change-requests/{id}/revert": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Revert Change Request
         * @description Revert an applied change request
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Change Request ID */
                    id: string;
                };
                cookie?: never;
            };
            /** @description Revert details */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["request.RevertChangeRequest"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Success"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/change-requests/{id}/review": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Review Change Request
         * @description Review and approve/reject a change request
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Change Request ID */
                    id: string;
                };
                cookie?: never;
            };
            /** @description Review details */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["request.ReviewChangeRequest"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Success"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/deliveries": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create delivery
         * @description Creates a new delivery task for an order
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Create delivery request */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["request.CreateDelivery"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.DeliveryTask"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/deliveries/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get delivery
         * @description Retrieves a delivery by ID
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Delivery ID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.DeliveryTask"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/deliveries/{id}/assign": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Assign driver
         * @description Assigns a driver to a delivery
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Delivery ID */
                    id: string;
                };
                cookie?: never;
            };
            /** @description Assign driver request */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["request.AssignDriver"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.DeliveryTask"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/deliveries/{id}/cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Cancel delivery
         * @description Cancels a delivery with reason
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Delivery ID */
                    id: string;
                };
                cookie?: never;
            };
            /** @description Cancel delivery request */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["request.CancelDelivery"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.DeliveryTask"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/deliveries/{id}/fail": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Mark delivery as failed
         * @description Marks a delivery as failed with reason
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Delivery ID */
                    id: string;
                };
                cookie?: never;
            };
            /** @description Fail delivery request */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["request.CancelDelivery"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.DeliveryTask"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/deliveries/{id}/location": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Update location
         * @description Updates driver's current GPS location
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Delivery ID */
                    id: string;
                };
                cookie?: never;
            };
            /** @description Update location request */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["request.UpdateLocation"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Success"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/deliveries/{id}/location/history": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get location history
         * @description Retrieves GPS tracking history
         */
        get: {
            parameters: {
                query?: {
                    /** @description Limit */
                    limit?: number;
                    /** @description Offset */
                    offset?: number;
                };
                header?: never;
                path: {
                    /** @description Delivery ID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.DeliveryLocationUpdate"][];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/deliveries/{id}/location/latest": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get latest location
         * @description Retrieves the most recent GPS location
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Delivery ID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.DeliveryLocationUpdate"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/deliveries/{id}/rate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Rate delivery
         * @description Customer rates delivery experience
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Delivery ID */
                    id: string;
                };
                cookie?: never;
            };
            /** @description Rate delivery request */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["request.RateDelivery"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.DeliveryTask"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/deliveries/{id}/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update status
         * @description Updates delivery status
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Delivery ID */
                    id: string;
                };
                cookie?: never;
            };
            /** @description Update status request */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["request.UpdateDeliveryStatus"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.DeliveryTask"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/deliveries/{id}/status/history": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get status history
         * @description Retrieves delivery status audit trail
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Delivery ID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.DeliveryStatusHistory"][];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/deliveries/{id}/tracking": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get tracking info
         * @description Retrieves complete tracking information (delivery + location + history)
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Delivery ID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.DeliveryTracking"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/drivers/{driverId}/deliveries": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List driver deliveries
         * @description Lists all deliveries for a driver
         */
        get: {
            parameters: {
                query?: {
                    /** @description Limit */
                    limit?: number;
                    /** @description Offset */
                    offset?: number;
                };
                header?: never;
                path: {
                    /** @description Driver ID */
                    driverId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.DeliveryTask"][];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/drivers/{driverId}/deliveries/active": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List active deliveries
         * @description Lists all active deliveries for a driver
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Driver ID */
                    driverId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.DeliveryTask"][];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Event
         * @description Create a new event (typically auto-created from qualified request)
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Event details */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["request.CreateEvent"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Event"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Event
         * @description Retrieve an event by ID
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Event ID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Event"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /**
         * Delete Event
         * @description Delete an event and all its blocks
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Event ID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Success"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        /**
         * Update Event
         * @description Update an existing event
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Event ID */
                    id: string;
                };
                cookie?: never;
            };
            /** @description Update details */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["request.UpdateEvent"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Event"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/events/{id}/blocks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Event Blocks
         * @description List all blocks for an event
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Event ID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.EventBlockList"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        put?: never;
        /**
         * Create Event Block
         * @description Create a new block within an event
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Event ID */
                    id: string;
                };
                cookie?: never;
            };
            /** @description Block details */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["request.CreateEventBlock"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.EventBlock"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events/{id}/cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Cancel Event
         * @description Cancel an event
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Event ID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Success"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events/{id}/complete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Complete Event
         * @description Mark an event as complete
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Event ID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Success"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events/{id}/publish": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Publish Event
         * @description Publish an event to make it bookable
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Event ID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Event"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events/{id}/with-blocks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Event With Blocks
         * @description Retrieve an event with all its blocks
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Event ID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.EventWithBlocks"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events/blocks/{blockId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Event Block
         * @description Retrieve a block by ID
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Block ID */
                    blockId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.EventBlock"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /**
         * Delete Event Block
         * @description Delete a block
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Block ID */
                    blockId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Success"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        /**
         * Update Event Block
         * @description Update an existing block
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Block ID */
                    blockId: string;
                };
                cookie?: never;
            };
            /** @description Update details */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["request.UpdateEventBlock"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.EventBlock"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/events/by-customer/{customerId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Events By Customer
         * @description List all events for a customer
         */
        get: {
            parameters: {
                query?: {
                    /** @description Limit */
                    limit?: number;
                    /** @description Offset */
                    offset?: number;
                };
                header?: never;
                path: {
                    /** @description Customer ID */
                    customerId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.EventList"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events/by-request/{requestId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Event By Request ID
         * @description Retrieve an event by its request ID
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Request ID */
                    requestId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Event"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events/by-status/{status}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Events By Status
         * @description List all events with a specific status
         */
        get: {
            parameters: {
                query?: {
                    /** @description Limit */
                    limit?: number;
                    /** @description Offset */
                    offset?: number;
                };
                header?: never;
                path: {
                    /** @description Event Status */
                    status: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.EventList"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/favorites": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add favorite
         * @description Adds an entity to favorites
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Add favorite request */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["request.AddFavorite"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Favorite"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/favorites/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Remove favorite
         * @description Removes a favorite by ID
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Favorite ID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/favorites/by-entity": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Remove favorite by entity
         * @description Removes a favorite by owner and entity details
         */
        delete: {
            parameters: {
                query: {
                    /** @description Owner ID */
                    owner_id: string;
                    /** @description Owner type (user, account) */
                    owner_type: string;
                    /** @description Entity ID */
                    entity_id: string;
                    /** @description Entity type (caterer, menu, menu_item) */
                    entity_type: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/favorites/check": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Check if favorite
         * @description Checks if an entity is favorited
         */
        get: {
            parameters: {
                query: {
                    /** @description Owner ID */
                    owner_id: string;
                    /** @description Owner type (user, account) */
                    owner_type: string;
                    /** @description Entity ID */
                    entity_id: string;
                    /** @description Entity type (caterer, menu, menu_item) */
                    entity_type: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            [key: string]: boolean;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/feedback": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create feedback
         * @description Creates feedback for an order
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Create feedback request */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["request.CreateFeedback"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Feedback"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/feedback/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get feedback
         * @description Retrieves feedback by ID
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Feedback ID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Feedback"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        /**
         * Update feedback
         * @description Updates existing feedback
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Feedback ID */
                    id: string;
                };
                cookie?: never;
            };
            /** @description Update feedback request */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["request.UpdateFeedback"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Feedback"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        post?: never;
        /**
         * Delete feedback
         * @description Deletes feedback
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Feedback ID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/invoices/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get invoice
         * @description Retrieves invoice details by ID
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Invoice ID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Invoice"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/invoices/{id}/cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Cancel invoice
         * @description Cancels an unpaid invoice
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Invoice ID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Invoice"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/invoices/{id}/issue": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Issue invoice
         * @description Issues a draft invoice to the customer
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Invoice ID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Invoice"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/invoices/{id}/items": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get invoice with items
         * @description Retrieves invoice with all line items
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Invoice ID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.InvoiceWithItems"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/media/{key}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete media file
         * @description Delete a media file from S3 storage
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description S3 object key */
                    key: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/media/signed-url/{key}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get signed URL
         * @description Generate a presigned URL for downloading a media file
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description S3 object key */
                    key: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["v1.signedURLResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/media/upload": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Upload media file
         * @description Upload an image or video file to S3 storage
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "multipart/form-data": {
                        /**
                         * Format: binary
                         * @description File to upload
                         */
                        file: string;
                        /** @description Storage prefix (e.g., menus, profiles) */
                        prefix?: string;
                        /** @description File type: image or video */
                        type: string;
                    };
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["v1.uploadMediaResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Request Entity Too Large */
                413: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/menu-items": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create menu item
         * @description Creates a new menu item for a caterer
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Menu item creation request */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["request.CreateMenuItem"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.MenuItem"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/menu-items/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get menu item
         * @description Retrieves a menu item by ID
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Menu Item ID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.MenuItem"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        /**
         * Update menu item
         * @description Updates an existing menu item
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Menu Item ID */
                    id: string;
                };
                cookie?: never;
            };
            /** @description Menu item update request */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["request.UpdateMenuItem"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.MenuItem"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        post?: never;
        /**
         * Delete menu item
         * @description Deletes a menu item
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Menu Item ID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/menu-items/{id}/details": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get menu item with details
         * @description Retrieves a menu item with all its ingredients and tags
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Menu Item ID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.MenuItemWithDetails"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/menu-items/{id}/ingredients": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add ingredient to menu item
         * @description Adds an ingredient to a menu item
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Menu Item ID */
                    id: string;
                };
                cookie?: never;
            };
            /** @description Ingredient addition request */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["request.AddIngredient"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.MenuItemIngredient"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/menu-items/{id}/media": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Attach media to menu item
         * @description Attaches an uploaded media file to a menu item
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Menu Item ID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody: components["requestBodies"]["request.AttachMedia"];
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.MediaAssociation"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/menu-items/{id}/media/{mediaId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Detach media from menu item
         * @description Removes a media file from a menu item
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Menu Item ID */
                    id: string;
                    /** @description Media ID */
                    mediaId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/menu-items/{id}/media/{mediaId}/primary": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Set primary media for menu item
         * @description Sets a media file as the primary/featured image for a menu item
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Menu Item ID */
                    id: string;
                    /** @description Media ID */
                    mediaId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            [key: string]: string;
                        };
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/menu-items/{id}/media/reorder": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update media display order
         * @description Updates the display order of a media association for menu item
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Menu Item ID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody: components["requestBodies"]["request.ReorderMedia"];
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            [key: string]: string;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/menu-items/{id}/tags": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Attach tag to menu item
         * @description Attaches a tag to a menu item
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Menu Item ID */
                    id: string;
                };
                cookie?: never;
            };
            /** @description Tag attachment request */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["request.AttachTag"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            [key: string]: string;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/menu-items/{id}/tags/{tagId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Detach tag from menu item
         * @description Removes a tag from a menu item
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Menu Item ID */
                    id: string;
                    /** @description Tag ID */
                    tagId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/menu-items/{menuItemId}/feedback": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List menu item feedback
         * @description Lists all feedback for a menu item
         */
        get: {
            parameters: {
                query?: {
                    /** @description Limit */
                    limit?: number;
                    /** @description Offset */
                    offset?: number;
                };
                header?: never;
                path: {
                    /** @description Menu Item ID */
                    menuItemId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Feedback"][];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/menu-items/{menuItemId}/rating": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get menu item rating
         * @description Retrieves average rating for a menu item
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Menu Item ID */
                    menuItemId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.MenuItemRating"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/menus": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create menu
         * @description Creates a new menu for a caterer
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Menu creation request */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["request.CreateMenu"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Menu"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/menus/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get menu
         * @description Retrieves a menu by ID
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Menu ID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Menu"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        /**
         * Update menu
         * @description Updates an existing menu
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Menu ID */
                    id: string;
                };
                cookie?: never;
            };
            /** @description Menu update request */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["request.UpdateMenu"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Menu"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        post?: never;
        /**
         * Delete menu
         * @description Deletes a menu
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Menu ID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/menus/{id}/details": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get menu with details
         * @description Retrieves a menu with all its courses, items, and tags
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Menu ID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.MenuWithDetails"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/menus/{id}/items": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get menu items
         * @description Retrieves all menu items for a specific menu
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Menu ID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.MenuItem"][];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/menus/{id}/media": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Attach media to menu
         * @description Attaches an uploaded media file to a menu
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Menu ID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody: components["requestBodies"]["request.AttachMedia"];
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.MediaAssociation"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/menus/{id}/media/{mediaId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Detach media from menu
         * @description Removes a media file from a menu
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Menu ID */
                    id: string;
                    /** @description Media ID */
                    mediaId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/menus/{id}/media/{mediaId}/primary": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Set primary media for menu
         * @description Sets a media file as the primary/featured image for a menu
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Menu ID */
                    id: string;
                    /** @description Media ID */
                    mediaId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            [key: string]: string;
                        };
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/menus/{id}/media/reorder": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update media display order
         * @description Updates the display order of a media association
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Menu ID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody: components["requestBodies"]["request.ReorderMedia"];
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            [key: string]: string;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/menus/courses": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create menu course
         * @description Creates a new course in a menu
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Course creation request */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["request.CreateMenuCourse"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.MenuCourse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/menus/courses/{courseId}/items": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Assign item to course
         * @description Assigns a menu item to a menu course
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Course ID */
                    courseId: string;
                };
                cookie?: never;
            };
            /** @description Assignment request */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["request.AssignItemToCourse"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            [key: string]: string;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/offers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Offer
         * @description Create a new catering offer with items
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Offer details */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["request.CreateOffer"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.CateringOffer"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/offers/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Offer
         * @description Retrieve an offer by ID
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Offer ID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.CateringOffer"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/offers/{id}/accept": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Accept Offer
         * @description Accept an offer and convert to order
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Offer ID */
                    id: string;
                };
                cookie?: never;
            };
            /** @description Acceptance details */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["request.AcceptOffer"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Order"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/offers/{id}/decline": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Decline Offer
         * @description Decline a catering offer
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Offer ID */
                    id: string;
                };
                cookie?: never;
            };
            /** @description Decline details */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["request.DeclineOffer"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Success"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/offers/{id}/send": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Send Offer
         * @description Send an offer to the customer
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Offer ID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Success"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/offers/{id}/versions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Offer Versions
         * @description List all versions of an offer
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Offer ID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.CateringOfferVersion"][];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/offers/{id}/versions/{version}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Offer Version
         * @description Get a specific version of an offer
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Offer ID */
                    id: string;
                    /** @description Version number */
                    version: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.CateringOfferVersion"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/offers/{id}/view": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Mark Offer Viewed
         * @description Mark an offer as viewed by customer
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Offer ID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Success"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orders": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Orders
         * @description List orders with optional filters
         */
        get: {
            parameters: {
                query?: {
                    /** @description Filter by customer ID */
                    customerId?: string;
                    /** @description Filter by caterer ID */
                    catererId?: string;
                    /** @description Filter by status */
                    status?: "pending" | "confirmed" | "in_preparation" | "delivered" | "cancelled";
                    /** @description Filter by date from (YYYY-MM-DD) */
                    dateFrom?: string;
                    /** @description Filter by date to (YYYY-MM-DD) */
                    dateTo?: string;
                    /** @description Limit (max 100) */
                    limit?: number;
                    /** @description Offset */
                    offset?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.OrderList"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orders/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Order
         * @description Retrieve an order by ID
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Order ID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Order"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orders/{id}/cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Cancel Order
         * @description Cancel an order
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Order ID */
                    id: string;
                };
                cookie?: never;
            };
            /** @description Cancellation details */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["request.CancelOrder"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Success"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orders/{id}/confirm": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Confirm Order
         * @description Confirm an order (typically after payment received)
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Order ID */
                    id: string;
                };
                cookie?: never;
            };
            /** @description Confirmation details */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["request.ConfirmOrder"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Success"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orders/{id}/deliver": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Mark Delivered
         * @description Mark an order as delivered
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Order ID */
                    id: string;
                };
                cookie?: never;
            };
            /** @description Delivery details */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["request.MarkDelivered"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Success"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orders/{id}/details": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Order With Details
         * @description Retrieve an order with all related data (items, address, offer)
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Order ID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.OrderWithDetails"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orders/{id}/start-preparation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Start Preparation
         * @description Start order preparation
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Order ID */
                    id: string;
                };
                cookie?: never;
            };
            /** @description Preparation details */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["request.StartPreparation"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Success"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orders/{orderId}/delivery": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get delivery by order
         * @description Retrieves delivery for an order
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Order ID */
                    orderId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.DeliveryTask"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orders/{orderId}/delivery/tracking": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get tracking by order
         * @description Retrieves complete tracking information for an order
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Order ID */
                    orderId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.DeliveryTracking"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orders/{orderId}/feedback": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List order feedback
         * @description Lists all feedback for an order
         */
        get: {
            parameters: {
                query?: {
                    /** @description Limit */
                    limit?: number;
                    /** @description Offset */
                    offset?: number;
                };
                header?: never;
                path: {
                    /** @description Order ID */
                    orderId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Feedback"][];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orders/{orderId}/invoice": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get invoice by order
         * @description Retrieves invoice for an order
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Order ID */
                    orderId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Invoice"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orders/{orderId}/payment": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get payment by order
         * @description Retrieves payment for an order
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Order ID */
                    orderId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Payment"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/payment-methods/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get payment method
         * @description Retrieves a payment method by ID
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Payment Method ID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.PaymentMethod"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/payments/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get payment
         * @description Retrieves payment details by ID
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Payment ID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Payment"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/payments/{id}/refund": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Refund payment
         * @description Issues a full or partial refund for a payment
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Payment ID */
                    id: string;
                };
                cookie?: never;
            };
            /** @description Refund request */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["request.RefundPayment"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Refund"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/payments/intents": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create payment intent
         * @description Creates a Stripe payment intent for an order
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Payment intent creation request */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["request.CreatePaymentIntent"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.PaymentIntent"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/public/menus": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List public menus
         * @description Retrieves all published public menus
         */
        get: {
            parameters: {
                query?: {
                    /** @description Limit (max 100) */
                    limit?: number;
                    /** @description Offset */
                    offset?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Menu"][];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ratings/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get rating
         * @description Retrieves a rating by ID
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Rating ID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.CatererRating"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /**
         * Delete rating
         * @description Deletes a rating (only by the account that created it)
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Rating ID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Success"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ratings/{id}/helpful": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Mark rating as helpful
         * @description Increments the helpful count for a rating
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Rating ID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Success"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ratings/{id}/response": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add caterer response
         * @description Allows a caterer to respond to a rating
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Rating ID */
                    id: string;
                };
                cookie?: never;
            };
            /** @description Add response request */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["request.AddResponse"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.CatererRating"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/requests": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Request
         * @description Create a new customer request with optional address and tags
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Request details */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["request.CreateRequest"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Request"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/requests/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Request
         * @description Retrieve a request by ID
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Request ID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Request"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update Request
         * @description Update an existing request
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Request ID */
                    id: string;
                };
                cookie?: never;
            };
            /** @description Update details */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["request.UpdateRequest"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Request"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/requests/{id}/assign": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Assign Request
         * @description Assign a request to a staff member
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Request ID */
                    id: string;
                };
                cookie?: never;
            };
            /** @description Assignment details */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["request.AssignRequest"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Success"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/requests/{id}/clone": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Clone Request
         * @description Clone an existing request for reordering
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Source Request ID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Request"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/requests/{id}/qualify": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Qualify Request
         * @description Qualify a request (staff only)
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Request ID */
                    id: string;
                };
                cookie?: never;
            };
            /** @description Qualification details */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["request.QualifyRequest"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Success"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/requests/orders/{orderId}/clone": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Clone From Order
         * @description Create a new request from a previous order
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Source Order ID */
                    orderId: string;
                };
                cookie?: never;
            };
            /** @description Clone details */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["request.CloneFromOrder"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Request"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/support/assigned": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List my assigned tickets
         * @description Lists tickets assigned to the authenticated user
         */
        get: {
            parameters: {
                query?: {
                    /** @description Limit */
                    limit?: number;
                    /** @description Offset */
                    offset?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.SupportTicket"][];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/support/tickets": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List tickets by status
         * @description Lists tickets filtered by status
         */
        get: {
            parameters: {
                query: {
                    /** @description Status */
                    status: "open" | "in_progress" | "resolved" | "closed";
                    /** @description Limit */
                    limit?: number;
                    /** @description Offset */
                    offset?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.SupportTicket"][];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        put?: never;
        /**
         * Create support ticket
         * @description Creates a new support ticket
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Create ticket request */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["request.CreateSupportTicket"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.SupportTicket"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/support/tickets/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get ticket
         * @description Retrieves a support ticket by ID
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Ticket ID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.SupportTicket"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/support/tickets/{id}/assign": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Assign ticket
         * @description Assigns a ticket to a user
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Ticket ID */
                    id: string;
                };
                cookie?: never;
            };
            /** @description Assign ticket request */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["request.AssignTicket"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.SupportTicket"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/support/tickets/{id}/comments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get ticket with comments
         * @description Retrieves a support ticket with all its comments
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Ticket ID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.TicketWithComments"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        put?: never;
        /**
         * Add comment
         * @description Adds a comment to a support ticket
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Ticket ID */
                    id: string;
                };
                cookie?: never;
            };
            /** @description Add comment request */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["request.AddTicketComment"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.SupportComment"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/support/tickets/{id}/escalate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Escalate ticket
         * @description Escalates the priority of a ticket
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Ticket ID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.SupportTicket"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/support/tickets/{id}/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update ticket status
         * @description Updates the status of a ticket
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Ticket ID */
                    id: string;
                };
                cookie?: never;
            };
            /** @description Update status request */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["request.UpdateTicketStatus"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.SupportTicket"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tags": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List tags
         * @description Retrieves all tags or tags for a specific group
         */
        get: {
            parameters: {
                query?: {
                    /** @description Tag group name */
                    group?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Tag"][];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/translation/do-translate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Translate
         * @description Translate a text
         */
        post: operations["do-translate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/translation/history": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Show history
         * @description Show all translation history
         */
        get: operations["history"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List users */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.User"][];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        put?: never;
        /** Create user */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description User */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["request.CreateUser"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.User"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get user */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.User"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        /** Update user */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description User */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["request.UpdateUser"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.User"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        post?: never;
        /** Delete user */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{userId}/blocks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List user blocks
         * @description Lists all blocks for a user
         */
        get: {
            parameters: {
                query?: {
                    /** @description Limit */
                    limit?: number;
                    /** @description Offset */
                    offset?: number;
                };
                header?: never;
                path: {
                    /** @description User ID */
                    userId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Block"][];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{userId}/carts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List user carts
         * @description Lists all carts for a user
         */
        get: {
            parameters: {
                query?: {
                    /** @description Limit */
                    limit?: number;
                    /** @description Offset */
                    offset?: number;
                };
                header?: never;
                path: {
                    /** @description User ID */
                    userId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Cart"][];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{userId}/carts/active": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get active cart
         * @description Gets or creates an active cart for the user and caterer
         */
        get: {
            parameters: {
                query: {
                    /** @description Caterer ID */
                    catererId: string;
                };
                header?: never;
                path: {
                    /** @description User ID */
                    userId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Cart"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{userId}/favorites": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List user favorites
         * @description Lists all favorites for a user
         */
        get: {
            parameters: {
                query?: {
                    /** @description Filter by entity type */
                    entity_type?: string;
                    /** @description Limit */
                    limit?: number;
                    /** @description Offset */
                    offset?: number;
                };
                header?: never;
                path: {
                    /** @description User ID */
                    userId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Favorite"][];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{userId}/payment-methods": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List user payment methods
         * @description Lists all payment methods for a user
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description User ID */
                    userId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.PaymentMethod"][];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{userId}/wallets": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List user wallets
         * @description Lists all wallets for a user
         */
        get: {
            parameters: {
                query?: {
                    /** @description Limit */
                    limit?: number;
                    /** @description Offset */
                    offset?: number;
                };
                header?: never;
                path: {
                    /** @description User ID */
                    userId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Wallet"][];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/wallets": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create wallet
         * @description Creates a new wallet for an account
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Wallet creation request */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["request.CreateWallet"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Wallet"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/wallets/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get wallet
         * @description Retrieves wallet details by ID
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Wallet ID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Wallet"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/wallets/{id}/balance": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get wallet balance
         * @description Retrieves current balance and available balance
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Wallet ID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Wallet"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/wallets/{id}/capture": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Capture hold
         * @description Captures previously held funds
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Wallet ID */
                    id: string;
                };
                cookie?: never;
            };
            /** @description Capture hold request */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["request.CaptureHold"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.WalletTransaction"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/wallets/{id}/charge": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Charge wallet
         * @description Charges a wallet (deducts funds)
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Wallet ID */
                    id: string;
                };
                cookie?: never;
            };
            /** @description Charge wallet request */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["request.ChargeWallet"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.WalletTransaction"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/wallets/{id}/fund": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Fund wallet
         * @description Adds funds to a wallet
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Wallet ID */
                    id: string;
                };
                cookie?: never;
            };
            /** @description Fund wallet request */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["request.FundWallet"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.WalletTransaction"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/wallets/{id}/hold": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Place hold
         * @description Places a hold on wallet funds
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Wallet ID */
                    id: string;
                };
                cookie?: never;
            };
            /** @description Place hold request */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["request.PlaceHold"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.WalletTransaction"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/wallets/{id}/release": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Release hold
         * @description Releases previously held funds
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Wallet ID */
                    id: string;
                };
                cookie?: never;
            };
            /** @description Release hold request */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["request.ReleaseHold"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.WalletTransaction"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/wallets/{id}/transactions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get wallet transactions
         * @description Retrieves transaction history for a wallet
         */
        get: {
            parameters: {
                query?: {
                    /** @description Limit */
                    limit?: number;
                    /** @description Offset */
                    offset?: number;
                };
                header?: never;
                path: {
                    /** @description Wallet ID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.WalletTransaction"][];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/wallets/transfer": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Transfer between wallets
         * @description Transfers funds from one wallet to another
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Transfer request */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["request.TransferBetweenWallets"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.TransferResult"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/webhooks/stripe": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Stripe webhook handler
         * @description Handles Stripe webhook events for payment confirmations and refunds
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            [key: string]: string;
                        };
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["response.Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        "entity.AccountSettings": {
            allowPurchaseOrders?: boolean;
            autoInvoice?: boolean;
            defaultCurrency?: string;
            notificationEmail?: string;
            requireApproval?: boolean;
            timeZone?: string;
        };
        /** @enum {string} */
        "entity.AuthorType": "customer" | "caterer" | "staff" | "system";
        /** @enum {string} */
        "entity.CateringOfferStatus": "invited" | "draft" | "sent" | "viewed" | "accepted" | "rejected" | "declined" | "expired" | "cancelled";
        /** @enum {string} */
        "entity.ChangeRequestEntityType": "offer" | "order" | "order_item" | "event" | "event_block";
        /** @enum {string} */
        "entity.ChangeRequestStatus": "pending" | "under_review" | "approved" | "rejected" | "applied" | "cancelled" | "expired";
        /** @enum {string} */
        "entity.ChangeRequestType": "quantity_change" | "item_addition" | "item_removal" | "item_substitution" | "time_change" | "date_change" | "address_change" | "special_instruction" | "pricing_adjustment" | "cancellation" | "other";
        /** @enum {string} */
        "entity.ChangeRequestUrgency": "low" | "normal" | "high" | "critical";
        /** @enum {string} */
        "entity.DiscountType": "percentage" | "fixed";
        /** @enum {string} */
        "entity.EventStatus": "planning" | "published" | "in_progress" | "confirmed" | "completed" | "cancelled";
        /** @enum {string} */
        "entity.OfferItemType": "menu" | "menu_item" | "equipment" | "service" | "delivery" | "custom";
        "entity.OneTimeToken": {
            consumed?: boolean;
            createdAt?: string;
            expiresAt?: string;
            id?: string;
            purpose?: string;
            token?: string;
            userId?: string;
        };
        /** @enum {string} */
        "entity.OrderStatus": "pending" | "confirmed" | "in_preparation" | "delivered" | "cancelled";
        /** @enum {string} */
        "entity.Priority": "low" | "medium" | "high" | "urgent";
        /** @enum {string} */
        "entity.RequestStatus": "submitted" | "qualified" | "open" | "in_progress" | "converted" | "cancelled" | "closed";
        /** @enum {string} */
        "entity.RequestType": "catering" | "event";
        "entity.Translation": {
            /** @example en */
            destination?: string;
            /** @example текст для перевода */
            original?: string;
            /** @example auto */
            source?: string;
            /** @example text for translation */
            translation?: string;
        };
        "entity.TranslationHistory": {
            history?: components["schemas"]["entity.Translation"][];
        };
        "request.AcceptOffer": {
            /** @description Optional: for partial acceptance */
            acceptedItems?: string[];
        };
        "request.AddComment": {
            attachments?: {
                [key: string]: unknown;
            };
            authorType: components["schemas"]["entity.AuthorType"];
            message: string;
        };
        "request.AddFavorite": {
            entity_id: string;
            /** @enum {string} */
            entity_type: "caterer" | "menu" | "menu_item";
            owner_id: string;
            /** @enum {string} */
            owner_type: "user" | "account";
        };
        "request.AddIngredient": {
            ingredientId: string;
            quantityPerPortion: number;
            unit?: string;
        };
        "request.AddItemToCart": {
            deliveryItemId?: string;
            equipmentItemId?: string;
            menuItemId?: string;
            notes?: string;
            quantity: number;
            serviceItemId?: string;
        };
        "request.AddResponse": {
            response: string;
        };
        "request.AddTicketComment": {
            body: string;
        };
        "request.AssignDriver": {
            driverId: string;
        };
        "request.AssignItemToCourse": {
            isDefault?: boolean;
            menuItemId: string;
            position?: number;
        };
        "request.AssignRequest": {
            assignedTo: string;
        };
        "request.AssignTicket": {
            assigneeId: string;
        };
        "request.AssignUsers": {
            userIds: string[];
        };
        "request.AttachMedia": {
            displayOrder?: number;
            isPrimary?: boolean;
            mediaId: string;
        };
        "request.AttachPaymentMethod": {
            setAsDefault?: boolean;
            stripePaymentMethodId: string;
            userId?: string;
        };
        "request.AttachTag": {
            tagId: string;
        };
        "request.BlockEntity": {
            entity_id: string;
            /** @enum {string} */
            entity_type: "caterer" | "menu" | "menu_item" | "user" | "account";
            owner_id: string;
            /** @enum {string} */
            owner_type: "user" | "account";
            reason?: string;
        };
        "request.CancelDelivery": {
            reason: string;
        };
        "request.CancelOrder": {
            /** @example Customer requested cancellation */
            reason: string;
        };
        "request.CaptureHold": {
            amount_cents: number;
            order_id?: string;
        };
        "request.ChargeWallet": {
            amount_cents: number;
            idempotency_key?: string;
            invoice_id?: string;
            order_id?: string;
        };
        "request.CloneFromOrder": {
            customerId: string;
        };
        "request.CloseAccount": {
            reason: string;
        };
        "request.ConfirmOrder": {
            /** @example Payment confirmed */
            notes?: string;
        };
        "request.ConvertCartToOrder": {
            costCenterId?: string;
            deliveryAddressId?: string;
            notes?: string;
        };
        "request.CreateAccount": {
            email?: string;
            name: string;
            phone?: string;
            /** @enum {string} */
            type: "customer" | "caterer" | "partner" | "internal" | "both";
        };
        "request.CreateAddress": {
            city?: string;
            contactName?: string;
            contactPhone?: string;
            countryCode?: string;
            line1: string;
            line2?: string;
            postalCode?: string;
        };
        "request.CreateChangeRequest": {
            assignedTo?: string;
            changeType: components["schemas"]["entity.ChangeRequestType"];
            description?: string;
            entityId: string;
            entityType: components["schemas"]["entity.ChangeRequestEntityType"];
            priceImpact?: number;
            requestedChange: {
                [key: string]: unknown;
            };
            responseDeadline?: string;
            subEntityId?: string;
            subEntityType?: string;
            title: string;
            urgency: components["schemas"]["entity.ChangeRequestUrgency"];
        };
        "request.CreateDelivery": {
            addressId?: string;
            catererId?: string;
            orderId: string;
            scheduledDropoffAt?: string;
        };
        "request.CreateEvent": {
            addressId?: string;
            customerId: string;
            endDate: string;
            name: string;
            notes?: string;
            requestId: string;
            startDate: string;
        };
        "request.CreateEventBlock": {
            dietaryRequirements?: Record<string, never>;
            endsAt?: string;
            headcount: number;
            locationId?: string;
            name: string;
            notes?: string;
            startsAt: string;
        };
        "request.CreateFeedback": {
            caterer_id: string;
            comment?: string;
            menu_item_id?: string;
            nps_value?: number;
            order_id: string;
            rating?: number;
            tags?: string[];
            user_id: string;
        };
        "request.CreateMenu": {
            catererId: string;
            defaultPricePerPersonCents?: number;
            description?: string;
            maxOrderQuantity?: number;
            minOrderQuantity?: number;
            name: string;
            orderableInMultiplesOf?: number;
            /** @enum {string} */
            publishStatus: "draft" | "published" | "archived";
            /** @enum {string} */
            seasonality?: "classic" | "seasonal" | "special_offer" | "custom";
            /** @description { "dietary-options": ["vegan", "gluten-free"], ... } */
            tags?: {
                [key: string]: string[];
            };
            /** @enum {string} */
            visibility: "private" | "public" | "storefront";
            visibleFrom?: string;
            visibleUntil?: string;
        };
        "request.CreateMenuCourse": {
            /** @enum {string} */
            compositionType: "starter" | "main" | "dessert" | "snack" | "drink" | "side" | "other";
            description?: string;
            maximumSelections?: number;
            menuId: string;
            name?: string;
            position?: number;
        };
        "request.CreateMenuItem": {
            calories?: number;
            carbsG?: number;
            catererId: string;
            currency: string;
            deliveryOptions?: string[];
            /** @enum {string} */
            deliveryType?: "hot" | "cold" | "frozen" | "ambient";
            description?: string;
            fatG?: number;
            isBundleOnly?: boolean;
            name: string;
            numberOfPeopleServed?: number;
            /** @enum {string} */
            packagingType?: "disposable" | "reusable" | "bulk" | "individual";
            portionSize?: string;
            priceCents: number;
            proteinG?: number;
            singlePackaged?: boolean;
            sku?: string;
            /** @description { "dietary-options": ["vegan"], "allergens": ["contains-nuts"], ... } */
            tags?: {
                [key: string]: string[];
            };
            /** @enum {string} */
            visibility: "inherit" | "private" | "public" | "storefront" | "hidden";
            visibleFrom?: string;
            visibleUntil?: string;
            weightG?: number;
        };
        "request.CreateOffer": {
            catererId: string;
            description?: string;
            invitationMessage?: string;
            items: components["schemas"]["request.CreateOfferItem"][];
            notes?: string;
            requestId: string;
            /** @description "staff" or "caterer" */
            sentBy?: string;
            title: string;
            validUntil?: string;
        };
        "request.CreateOfferItem": {
            customizations?: {
                [key: string]: unknown;
            };
            deliveryDate: string;
            discountType?: components["schemas"]["entity.DiscountType"];
            discountValue?: number;
            equipmentId?: string;
            isOptional?: boolean;
            itemDescription?: string;
            itemName: string;
            itemType: components["schemas"]["entity.OfferItemType"];
            menuId?: string;
            menuItemId?: string;
            quantity: number;
            serviceItemId?: string;
            serviceTimeEnd?: string;
            serviceTimeStart?: string;
            specialInstructions?: string;
            taxRateBps?: number;
            unitPriceCents: number;
        };
        "request.CreatePaymentIntent": {
            accountId: string;
            amountCents: number;
            /** @enum {string} */
            currency: "usd" | "eur" | "gbp" | "cad";
            description: string;
            orderId: string;
        };
        "request.CreateRating": {
            catererId: string;
            comment?: string;
            rating: number;
        };
        "request.CreateRequest": {
            budgetCents?: number;
            city?: string;
            currency: string;
            customerId: string;
            deliveryAddress?: components["schemas"]["request.CreateAddress"];
            /** @description Address handling (provide either ID or full address) */
            deliveryAddressId?: string;
            description?: string;
            dietaryRequirements?: components["schemas"]["request.DietaryRequirements"];
            requestType: components["schemas"]["entity.RequestType"];
            requestedDates: components["schemas"]["request.RequestedDate"][];
            /** @description Tags */
            tags?: {
                [key: string]: string[];
            };
            title: string;
        };
        "request.CreateSupportTicket": {
            accountId?: string;
            description?: string;
            /** @enum {string} */
            priority: "low" | "normal" | "high" | "urgent";
            /** @enum {string} */
            source: "customer" | "caterer" | "internal";
            subject: string;
        };
        "request.CreateUser": {
            email: string;
            firstName: string;
            lastName: string;
            password: string;
            phone?: string;
        };
        "request.CreateWallet": {
            account_id: string;
            allow_overdraft?: boolean;
            currency: string;
            name: string;
            user_id?: string;
        };
        "request.DeclineOffer": {
            reason: string;
        };
        "request.DietaryRequirements": {
            glutenFree?: number;
            halal?: number;
            kosher?: number;
            lactoseFree?: number;
            other?: string;
            vegan?: number;
            vegetarian?: number;
        };
        "request.EscalateChangeRequest": {
            escalatedTo: string;
            reason: string;
        };
        "request.ExchangeOTT": {
            token: string;
        };
        "request.ForgotPassword": {
            email: string;
        };
        "request.FundWallet": {
            amount_cents: number;
            idempotency_key?: string;
            invoice_id?: string;
            payment_id?: string;
        };
        "request.InviteStaff": {
            email: string;
            position?: string;
            roleId: string;
        };
        "request.IssueOTT": {
            purpose: string;
            /** @enum {string} */
            ttl?: "short" | "long";
            userId: string;
        };
        "request.Login": {
            email: string;
            password: string;
        };
        "request.MarkDelivered": {
            /** @example 2024-01-15T12:30:00Z */
            deliveredAt?: string;
            /** @example Delivered to reception */
            deliveryNotes?: string;
            /** @example John Doe */
            recipientName?: string;
            /** @example base64-encoded-signature */
            signature?: string;
        };
        "request.PlaceHold": {
            amount_cents: number;
            idempotency_key?: string;
            order_id?: string;
        };
        "request.QualifyRequest": {
            notes: string;
            priority: components["schemas"]["entity.Priority"];
        };
        "request.RateDelivery": {
            feedback?: string;
            rating: number;
        };
        "request.RefundPayment": {
            amountCents: number;
            reason: string;
        };
        "request.ReleaseHold": {
            amount_cents: number;
            order_id?: string;
        };
        "request.ReorderMedia": {
            items: components["schemas"]["request.ReorderMediaItem"][];
        };
        "request.ReorderMediaItem": {
            associationId: string;
            displayOrder?: number;
        };
        "request.RequestSMSRecovery": {
            email: string;
        };
        "request.RequestedDate": {
            /** @description YYYY-MM-DD */
            date: string;
            /** @description "delivery", "pickup", "on_site" */
            deliveryType?: string;
            estimatedPeople?: number;
            /** @description "morning", "afternoon", "evening" */
            timeSlot?: string;
        };
        "request.ResetPassword": {
            newPassword: string;
            token: string;
        };
        "request.RevertChangeRequest": {
            revertReason: string;
        };
        "request.ReviewChangeRequest": {
            appliedChange?: {
                [key: string]: unknown;
            };
            approved?: boolean;
            reviewNotes: string;
        };
        "request.SendVerificationCode": {
            phoneNumber: string;
        };
        "request.StartPreparation": {
            /** @example 2024-01-15T14:00:00Z */
            estimatedCompletionTime?: string;
            /** @example Starting preparation */
            notes?: string;
        };
        "request.SuspendAccount": {
            reason: string;
        };
        "request.TransferBetweenWallets": {
            amount_cents: number;
            from_wallet_id: string;
            idempotency_key?: string;
            to_wallet_id: string;
        };
        "request.Translate": {
            /** @example en */
            destination: string;
            /** @example текст для перевода */
            original: string;
            /** @example auto */
            source: string;
        };
        "request.UpdateAccount": {
            billingAddressId?: string;
            email?: string;
            name?: string;
            phone?: string;
            taxId?: string;
        };
        "request.UpdateCartItemQuantity": {
            quantity: number;
        };
        "request.UpdateDeliveryStatus": {
            notes?: string;
            /** @enum {string} */
            status: "planned" | "assigned" | "en_route" | "delivered" | "failed" | "cancelled";
        };
        "request.UpdateEvent": {
            addressId?: string;
            endDate?: string;
            name?: string;
            notes?: string;
            startDate?: string;
        };
        "request.UpdateEventBlock": {
            dietaryRequirements?: Record<string, never>;
            endsAt?: string;
            headcount?: number;
            locationId?: string;
            name?: string;
            notes?: string;
            startsAt?: string;
        };
        "request.UpdateFeedback": {
            comment?: string;
            nps_value?: number;
            rating?: number;
            tags?: string[];
        };
        "request.UpdateLocation": {
            accuracyMeters?: number;
            batteryLevel?: number;
            estimatedArrival?: string;
            headingDegrees?: number;
            latitude: number;
            longitude: number;
            speedKmh?: number;
        };
        "request.UpdateMenu": {
            defaultPricePerPersonCents?: number;
            description?: string;
            maxOrderQuantity?: number;
            minOrderQuantity?: number;
            name: string;
            orderableInMultiplesOf?: number;
            /** @enum {string} */
            publishStatus: "draft" | "published" | "archived";
            /** @enum {string} */
            seasonality?: "classic" | "seasonal" | "special_offer" | "custom";
            /** @description { "dietary-options": ["vegan", "gluten-free"], ... } */
            tags?: {
                [key: string]: string[];
            };
            /** @enum {string} */
            visibility: "private" | "public" | "storefront";
            visibleFrom?: string;
            visibleUntil?: string;
        };
        "request.UpdateMenuItem": {
            calories?: number;
            carbsG?: number;
            currency: string;
            deliveryOptions?: string[];
            /** @enum {string} */
            deliveryType?: "hot" | "cold" | "frozen" | "ambient";
            description?: string;
            fatG?: number;
            isBundleOnly?: boolean;
            name: string;
            numberOfPeopleServed?: number;
            /** @enum {string} */
            packagingType?: "disposable" | "reusable" | "bulk" | "individual";
            portionSize?: string;
            priceCents: number;
            proteinG?: number;
            singlePackaged?: boolean;
            sku?: string;
            /** @description { "dietary-options": ["vegan"], "allergens": ["contains-nuts"], ... } */
            tags?: {
                [key: string]: string[];
            };
            /** @enum {string} */
            visibility: "inherit" | "private" | "public" | "storefront" | "hidden";
            visibleFrom?: string;
            visibleUntil?: string;
            weightG?: number;
        };
        "request.UpdateRequest": {
            budgetCents?: number;
            city?: string;
            description?: string;
            title?: string;
        };
        "request.UpdateStaffPosition": {
            position: string;
        };
        "request.UpdateStaffRole": {
            roleId: string;
        };
        "request.UpdateTicketStatus": {
            /** @enum {string} */
            status: "open" | "in_progress" | "resolved" | "closed";
        };
        "request.UpdateUser": {
            email?: string;
            firstName?: string;
            lastName?: string;
            password?: string;
            phone?: string;
        };
        "request.VerifyCode": {
            code: string;
            phoneNumber: string;
        };
        "request.VerifySMSRecovery": {
            code: string;
            email: string;
        };
        "request.VerifyTOTP": {
            code: string;
        };
        "response.AccessToken": {
            expiresAt?: number;
            token?: string;
        };
        "response.Account": {
            billingAddressId?: string;
            createdAt?: string;
            email?: string;
            id?: string;
            name?: string;
            phone?: string;
            settings?: components["schemas"]["entity.AccountSettings"];
            status?: string;
            taxId?: string;
            type?: string;
            updatedAt?: string;
        };
        "response.Address": {
            city?: string;
            contactName?: string;
            contactPhone?: string;
            countryCode?: string;
            id?: string;
            line1?: string;
            line2?: string;
            postalCode?: string;
        };
        "response.BackupCodes": {
            codes?: string[];
        };
        "response.Block": {
            created_at?: string;
            entity_id?: string;
            entity_type?: string;
            id?: string;
            owner_id?: string;
            owner_type?: string;
            reason?: string;
        };
        "response.Cart": {
            accountId?: string;
            catererId?: string;
            createdAt?: string;
            currency?: string;
            deliveryAddressId?: string;
            deliveryDate?: string;
            deliveryEndsAt?: string;
            deliveryStartsAt?: string;
            id?: string;
            status?: string;
            totalCents?: number;
            updatedAt?: string;
            userId?: string;
        };
        "response.CartItem": {
            cartId?: string;
            createdAt?: string;
            deliveryItemId?: string;
            descriptionSnapshot?: string;
            equipmentItemId?: string;
            id?: string;
            menuItemId?: string;
            nameSnapshot?: string;
            notes?: string;
            quantity?: number;
            serviceItemId?: string;
            sourceMenuId?: string;
            totalCents?: number;
            unitPriceCents?: number;
            updatedAt?: string;
        };
        "response.CartWithItems": {
            cart?: components["schemas"]["response.Cart"];
            items?: components["schemas"]["response.CartItem"][];
        };
        "response.CatererRating": {
            accountId?: string;
            catererId?: string;
            comment?: string;
            createdAt?: string;
            helpfulCount?: number;
            id?: string;
            rating?: number;
            respondedAt?: string;
            response?: string;
        };
        "response.CatererRatingSummary": {
            average_rating?: number;
            caterer_id?: string;
        };
        "response.CatererStats": {
            averageRating?: number;
            catererId?: string;
            totalRatings?: number;
        };
        "response.CateringOffer": {
            acceptedAt?: string;
            catererId?: string;
            createdAt?: string;
            /** @description Audit */
            createdBy?: string;
            currency?: string;
            declineReason?: string;
            declinedAt?: string;
            description?: string;
            eventId?: string;
            expiresAt?: string;
            id?: string;
            /** @description Invitation */
            invitationMessage?: string;
            notes?: string;
            /** @description Deprecated: use EventID instead */
            requestId?: string;
            sentAt?: string;
            /** @description Tracking */
            sentBy?: string;
            status?: components["schemas"]["entity.CateringOfferStatus"];
            title?: string;
            totalPriceCents?: number;
            updatedAt?: string;
            /** @description Validity */
            validUntil?: string;
            viewedAt?: string;
        };
        "response.CateringOfferVersion": {
            cateringOfferId?: string;
            changeLog?: string;
            changes?: Record<string, never>;
            createdAt?: string;
            createdBy?: string;
            id?: string;
            itemsSnapshot?: Record<string, never>;
            offerSnapshot?: Record<string, never>;
            restoredFromVersion?: number;
            version?: number;
        };
        "response.ChangeRequest": {
            appliedChange?: Record<string, never>;
            assignedTo?: string;
            canBeReverted?: boolean;
            changeType?: components["schemas"]["entity.ChangeRequestType"];
            createdAt?: string;
            description?: string;
            entityId?: string;
            entityType?: components["schemas"]["entity.ChangeRequestEntityType"];
            escalated?: boolean;
            escalatedAt?: string;
            escalatedTo?: string;
            id?: string;
            impactAssessment?: Record<string, never>;
            metadata?: Record<string, never>;
            priceImpactCents?: number;
            requestedAt?: string;
            requestedBy?: string;
            requestedChange?: Record<string, never>;
            requiresProductionChange?: boolean;
            responseDeadline?: string;
            responseSlaMinutes?: number;
            revertReason?: string;
            revertedAt?: string;
            revertedBy?: string;
            reviewNotes?: string;
            reviewedAt?: string;
            reviewedBy?: string;
            status?: components["schemas"]["entity.ChangeRequestStatus"];
            subEntityId?: string;
            subEntityType?: string;
            title?: string;
            updatedAt?: string;
            urgency?: components["schemas"]["entity.ChangeRequestUrgency"];
        };
        "response.ChangeRequestComment": {
            attachments?: Record<string, never>;
            authorId?: string;
            authorType?: components["schemas"]["entity.AuthorType"];
            changeRequestId?: string;
            createdAt?: string;
            id?: string;
            message?: string;
        };
        "response.ChangeRequestHistory": {
            changeRequestId?: string;
            changedBy?: string;
            createdAt?: string;
            id?: string;
            notes?: string;
            statusFrom?: string;
            statusTo?: string;
        };
        "response.DeliveryLocationUpdate": {
            accuracyMeters?: number;
            batteryLevel?: number;
            createdAt?: string;
            deliveryId?: string;
            headingDegrees?: number;
            id?: string;
            latitude?: number;
            longitude?: number;
            speedKmh?: number;
        };
        "response.DeliveryStatusHistory": {
            createdAt?: string;
            createdBy?: string;
            deliveryId?: string;
            id?: string;
            latitude?: number;
            longitude?: number;
            notes?: string;
            status?: string;
        };
        "response.DeliveryTask": {
            actualDropoffAt?: string;
            actualPickupAt?: string;
            addressId?: string;
            cancelledReason?: string;
            catererId?: string;
            createdAt?: string;
            currentLatitude?: number;
            currentLongitude?: number;
            customerFeedback?: string;
            customerRating?: number;
            deliveryNotes?: string;
            driverId?: string;
            estimatedArrivalAt?: string;
            failedReason?: string;
            id?: string;
            orderId?: string;
            pickupLocationId?: string;
            provider?: string;
            scheduledDropoffAt?: string;
            scheduledPickupAt?: string;
            status?: string;
            trackingUrl?: string;
            updatedAt?: string;
        };
        "response.DeliveryTracking": {
            delivery?: components["schemas"]["response.DeliveryTask"];
            latestLocation?: components["schemas"]["response.DeliveryLocationUpdate"];
            statusHistory?: components["schemas"]["response.DeliveryStatusHistory"][];
        };
        "response.Error": {
            /** @example 1001 */
            code?: number;
            /** @example INVALID_REQUEST */
            key?: string;
            /** @example invalid request body */
            message?: string;
        };
        "response.Event": {
            addressId?: string;
            createdAt?: string;
            customerId?: string;
            endDate?: string;
            id?: string;
            name?: string;
            notes?: string;
            requestId?: string;
            startDate?: string;
            status?: components["schemas"]["entity.EventStatus"];
            updatedAt?: string;
        };
        "response.EventBlock": {
            createdAt?: string;
            dietaryRequirements?: Record<string, never>;
            endsAt?: string;
            eventId?: string;
            headcount?: number;
            id?: string;
            locationId?: string;
            name?: string;
            notes?: string;
            orderId?: string;
            startsAt?: string;
            updatedAt?: string;
        };
        "response.EventBlockList": {
            blocks?: components["schemas"]["response.EventBlock"][];
            total?: number;
        };
        "response.EventList": {
            events?: components["schemas"]["response.Event"][];
            limit?: number;
            offset?: number;
            total?: number;
        };
        "response.EventWithBlocks": {
            blocks?: components["schemas"]["response.EventBlock"][];
            event?: components["schemas"]["response.Event"];
        };
        "response.Favorite": {
            created_at?: string;
            entity_id?: string;
            entity_type?: string;
            id?: string;
            owner_id?: string;
            owner_type?: string;
        };
        "response.Feedback": {
            caterer_id?: string;
            comment?: string;
            created_at?: string;
            id?: string;
            menu_item_id?: string;
            nps_value?: number;
            order_id?: string;
            rating?: number;
            tags?: string[];
            user_id?: string;
        };
        "response.InvitationCreated": {
            email?: string;
            message?: string;
        };
        "response.Invoice": {
            accountId?: string;
            createdAt?: string;
            currency?: string;
            dueDate?: string;
            id?: string;
            invoiceNumber?: string;
            issueDate?: string;
            orderId?: string;
            pdfUrl?: string;
            status?: string;
            totalCents?: number;
            updatedAt?: string;
        };
        "response.InvoiceItem": {
            createdAt?: string;
            description?: string;
            id?: string;
            invoiceId?: string;
            quantity?: number;
            totalCents?: number;
            unitPriceCents?: number;
            updatedAt?: string;
        };
        "response.InvoiceList": {
            invoices?: components["schemas"]["response.Invoice"][];
            limit?: number;
            offset?: number;
            total?: number;
        };
        "response.InvoiceWithItems": {
            invoice?: components["schemas"]["response.Invoice"];
            items?: components["schemas"]["response.InvoiceItem"][];
        };
        "response.Media": {
            contentType?: string;
            createdAt?: string;
            id?: string;
            key?: string;
            mediaType?: string;
            metadata?: {
                [key: string]: string;
            };
            originalFilename?: string;
            sizeBytes?: number;
            updatedAt?: string;
            uploadedBy?: string;
            url?: string;
        };
        "response.MediaAssociation": {
            createdAt?: string;
            displayOrder?: number;
            entityId?: string;
            entityType?: string;
            id?: string;
            isPrimary?: boolean;
            media?: components["schemas"]["response.Media"];
            mediaId?: string;
        };
        "response.Menu": {
            catererId?: string;
            createdAt?: string;
            defaultPricePerPersonCents?: number;
            description?: string;
            id?: string;
            isActive?: boolean;
            maxOrderQuantity?: number;
            minOrderQuantity?: number;
            name?: string;
            orderableInMultiplesOf?: number;
            publishStatus?: string;
            seasonality?: string;
            updatedAt?: string;
            visibility?: string;
            visibleFrom?: string;
            visibleUntil?: string;
        };
        "response.MenuCourse": {
            compositionType?: string;
            createdAt?: string;
            description?: string;
            id?: string;
            maximumSelections?: number;
            menuId?: string;
            name?: string;
            position?: number;
            updatedAt?: string;
        };
        "response.MenuCourseWithItems": {
            compositionType?: string;
            createdAt?: string;
            description?: string;
            id?: string;
            items?: components["schemas"]["response.MenuItemInCourse"][];
            maximumSelections?: number;
            menuId?: string;
            name?: string;
            position?: number;
            updatedAt?: string;
        };
        "response.MenuItem": {
            calories?: number;
            carbsG?: number;
            catererId?: string;
            createdAt?: string;
            currency?: string;
            deliveryOptions?: string[];
            deliveryType?: string;
            description?: string;
            fatG?: number;
            id?: string;
            isActive?: boolean;
            isBundleOnly?: boolean;
            name?: string;
            numberOfPeopleServed?: number;
            packagingType?: string;
            portionSize?: string;
            priceCents?: number;
            proteinG?: number;
            singlePackaged?: boolean;
            sku?: string;
            updatedAt?: string;
            visibility?: string;
            visibleFrom?: string;
            visibleUntil?: string;
            weightG?: number;
        };
        "response.MenuItemInCourse": {
            calories?: number;
            carbsG?: number;
            catererId?: string;
            createdAt?: string;
            currency?: string;
            deliveryOptions?: string[];
            deliveryType?: string;
            description?: string;
            fatG?: number;
            id?: string;
            isActive?: boolean;
            isBundleOnly?: boolean;
            isDefault?: boolean;
            name?: string;
            numberOfPeopleServed?: number;
            packagingType?: string;
            portionSize?: string;
            position?: number;
            priceCents?: number;
            proteinG?: number;
            singlePackaged?: boolean;
            sku?: string;
            updatedAt?: string;
            visibility?: string;
            visibleFrom?: string;
            visibleUntil?: string;
            weightG?: number;
        };
        "response.MenuItemIngredient": {
            id?: string;
            ingredientId?: string;
            quantityPerPortion?: number;
            unit?: string;
        };
        "response.MenuItemRating": {
            average_rating?: number;
            menu_item_id?: string;
        };
        "response.MenuItemWithDetails": {
            calories?: number;
            carbsG?: number;
            catererId?: string;
            createdAt?: string;
            currency?: string;
            deliveryOptions?: string[];
            deliveryType?: string;
            description?: string;
            fatG?: number;
            id?: string;
            ingredients?: components["schemas"]["response.MenuItemIngredient"][];
            isActive?: boolean;
            isBundleOnly?: boolean;
            name?: string;
            numberOfPeopleServed?: number;
            packagingType?: string;
            portionSize?: string;
            priceCents?: number;
            proteinG?: number;
            singlePackaged?: boolean;
            sku?: string;
            tags?: components["schemas"]["response.Tag"][];
            updatedAt?: string;
            visibility?: string;
            visibleFrom?: string;
            visibleUntil?: string;
            weightG?: number;
        };
        "response.MenuWithDetails": {
            catererId?: string;
            courses?: components["schemas"]["response.MenuCourseWithItems"][];
            createdAt?: string;
            defaultPricePerPersonCents?: number;
            description?: string;
            id?: string;
            isActive?: boolean;
            maxOrderQuantity?: number;
            media?: components["schemas"]["response.Media"][];
            minOrderQuantity?: number;
            name?: string;
            orderableInMultiplesOf?: number;
            publishStatus?: string;
            seasonality?: string;
            tags?: components["schemas"]["response.Tag"][];
            updatedAt?: string;
            visibility?: string;
            visibleFrom?: string;
            visibleUntil?: string;
        };
        "response.Order": {
            addressId?: string;
            cartId?: string;
            cateringOfferId?: string;
            costCenterId?: string;
            createdAt?: string;
            currency?: string;
            deliveryEndsAt?: string;
            deliveryStartsAt?: string;
            eventBlockId?: string;
            id?: string;
            notes?: string;
            purchaseOrderNumber?: string;
            scheduledFor?: string;
            status?: components["schemas"]["entity.OrderStatus"];
            totalCents?: number;
            updatedAt?: string;
        };
        "response.OrderItem": {
            coursePosition?: number;
            courseType?: string;
            createdAt?: string;
            deliveryItemId?: string;
            equipmentItemId?: string;
            id?: string;
            itemSnapshot?: Record<string, never>;
            menuItemId?: string;
            nameSnapshot?: string;
            orderId?: string;
            quantity?: number;
            serviceItemId?: string;
            sourceMenuId?: string;
            sourceOfferItemId?: string;
            totalCents?: number;
            unitPriceCents?: number;
        };
        "response.OrderList": {
            limit?: number;
            offset?: number;
            orders?: components["schemas"]["response.Order"][];
            total?: number;
        };
        "response.OrderWithDetails": {
            address?: components["schemas"]["response.Address"];
            items?: components["schemas"]["response.OrderItem"][];
            offer?: components["schemas"]["response.CateringOffer"];
            order?: components["schemas"]["response.Order"];
        };
        "response.Payment": {
            accountId?: string;
            amountCents?: number;
            createdAt?: string;
            currency?: string;
            id?: string;
            invoiceId?: string;
            orderId?: string;
            paymentMethod?: string;
            processedAt?: string;
            providerId?: string;
            providerPaymentId?: string;
            status?: string;
            updatedAt?: string;
        };
        "response.PaymentIntent": {
            clientSecret?: string;
            paymentId?: string;
            status?: string;
        };
        "response.PaymentMethod": {
            accountId?: string;
            brand?: string;
            createdAt?: string;
            expMonth?: number;
            expYear?: number;
            id?: string;
            isDefault?: boolean;
            last4?: string;
            providerCustomerId?: string;
            providerId?: string;
            providerPmId?: string;
            userId?: string;
        };
        "response.Refund": {
            amountCents?: number;
            createdAt?: string;
            id?: string;
            paymentId?: string;
            processedAt?: string;
            providerRefundId?: string;
            reason?: string;
            status?: string;
            updatedAt?: string;
        };
        "response.Request": {
            assignedAt?: string;
            assignedTo?: string;
            budgetCents?: number;
            city?: string;
            clonedFromOrderId?: string;
            clonedFromRequestId?: string;
            /** @description New fields */
            contactUserId?: string;
            createdAt?: string;
            currency?: string;
            customerId?: string;
            description?: string;
            dietaryRequirements?: Record<string, never>;
            headcount?: number;
            id?: string;
            priority?: components["schemas"]["entity.Priority"];
            qualifiedAt?: string;
            qualifiedBy?: string;
            requestType?: components["schemas"]["entity.RequestType"];
            requestedDates?: Record<string, never>;
            status?: components["schemas"]["entity.RequestStatus"];
            title?: string;
            updatedAt?: string;
        };
        "response.StaffMember": {
            accountId?: string;
            email?: string;
            firstName?: string;
            id?: string;
            invitationStatus?: string;
            /** @description Unix timestamp */
            invitedAt?: number;
            invitedBy?: string;
            /** @description Unix timestamp */
            joinedAt?: number;
            lastName?: string;
            phone?: string;
            position?: string;
            roleId?: string;
            roleName?: string;
            userId?: string;
        };
        "response.Success": {
            message?: string;
        };
        "response.SupportComment": {
            authorId?: string;
            body?: string;
            createdAt?: string;
            id?: string;
            ticketId?: string;
        };
        "response.SupportTicket": {
            accountId?: string;
            assignedTo?: string;
            createdAt?: string;
            createdBy?: string;
            description?: string;
            id?: string;
            priority?: string;
            source?: string;
            status?: string;
            subject?: string;
            updatedAt?: string;
        };
        "response.TOTPDisabled": {
            message?: string;
        };
        "response.TOTPEnabled": {
            backupCodes?: string[];
            message?: string;
        };
        "response.TOTPSetup": {
            accountId?: string;
            issuer?: string;
            qrCode?: string;
            secret?: string;
        };
        "response.Tag": {
            createdAt?: string;
            groupName?: string;
            id?: string;
            key?: string;
            nameTranslations?: Record<string, never>;
        };
        "response.TicketWithComments": {
            comments?: components["schemas"]["response.SupportComment"][];
            ticket?: components["schemas"]["response.SupportTicket"];
        };
        "response.TransferResult": {
            from_transaction?: components["schemas"]["response.WalletTransaction"];
            to_transaction?: components["schemas"]["response.WalletTransaction"];
            transfer_group?: string;
        };
        "response.User": {
            createdAt?: string;
            email?: string;
            firstName?: string;
            id?: string;
            lastName?: string;
            phone?: string;
            status?: string;
            totpEnabled?: boolean;
            updatedAt?: string;
        };
        "response.VerificationResult": {
            message?: string;
            phoneNumber?: string;
            verified?: boolean;
        };
        "response.VerificationSent": {
            expiresInMinutes?: number;
            message?: string;
            phoneNumber?: string;
        };
        "response.Wallet": {
            account_id?: string;
            allow_overdraft?: boolean;
            available_cents?: number;
            balance_cents?: number;
            created_at?: string;
            currency?: string;
            hold_cents?: number;
            id?: string;
            name?: string;
            status?: string;
            updated_at?: string;
            user_id?: string;
            version?: number;
        };
        "response.WalletTransaction": {
            amount_cents?: number;
            balance_after_cents?: number;
            created_at?: string;
            id?: string;
            idempotency_key?: string;
            invoice_id?: string;
            order_id?: string;
            payment_id?: string;
            refund_id?: string;
            transfer_group?: string;
            tx_type?: string;
            wallet_id?: string;
        };
        "v1.signedURLResponse": {
            expires_in?: string;
            url?: string;
        };
        "v1.uploadMediaResponse": {
            id?: string;
            key?: string;
            size?: number;
            url?: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: {
        /** @description Reorder request */
        "request.ReorderMedia": {
            content: {
                "application/json": components["schemas"]["request.ReorderMedia"];
            };
        };
        /** @description Media attachment request */
        "request.AttachMedia": {
            content: {
                "application/json": components["schemas"]["request.AttachMedia"];
            };
        };
    };
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    "do-translate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Set up translation */
        requestBody: {
            content: {
                "application/json": components["schemas"]["request.Translate"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["entity.Translation"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["response.Error"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["response.Error"];
                };
            };
        };
    };
    history: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["entity.TranslationHistory"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["response.Error"];
                };
            };
        };
    };
}
